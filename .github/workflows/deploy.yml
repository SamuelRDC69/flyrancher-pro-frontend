name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the main branch
  push:
    branches: [ main, master ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      
      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile --prefer-offline
          echo "‚úÖ Dependencies installed successfully"
      
      - name: Build application
        run: |
          yarn build
        env:
          NODE_ENV: production
          VITE_APP_ENV: production
          VITE_API_BASE_URL: https://flyrancher-sub.onrender.com
          CI: true
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  # Deploy job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Health check job
  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Wait for deployment
        run: sleep 30
      
      - name: Health check
        run: |
          # Check if the site is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://samuelrdc69.github.io/flyrancher-pro-frontend/)
          
          if [ $HTTP_STATUS -eq 200 ]; then
            echo "‚úÖ Site is accessible (HTTP $HTTP_STATUS)"
          else
            echo "‚ùå Site is not accessible (HTTP $HTTP_STATUS)"
            exit 1
          fi
          
          # Check if essential resources load
          curl -f https://samuelrdc69.github.io/flyrancher-pro-frontend/manifest.json > /dev/null || echo "‚ö†Ô∏è Manifest file not found"
          echo "‚úÖ Basic health check completed"
          
      - name: Basic performance check
        run: |
          echo "‚è±Ô∏è Checking site performance..."
          
          # Simple curl check with timing
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code};%{time_total}" https://samuelrdc69.github.io/flyrancher-pro-frontend/)
          STATUS_CODE=$(echo $HTTP_STATUS | cut -d';' -f1)
          RESPONSE_TIME=$(echo $HTTP_STATUS | cut -d';' -f2)
          
          echo "üìä Response time: ${RESPONSE_TIME}s"
          echo "üìà HTTP Status: $STATUS_CODE"
          
          if [ $STATUS_CODE -eq 200 ]; then
            echo "‚úÖ Performance check passed"
          else
            echo "‚ö†Ô∏è Performance check warnings detected"
          fi

  # Notification job
  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy, health-check]
    if: always()
    
    steps:
      - name: Deployment Success Notification
        if: ${{ needs.deploy.result == 'success' && needs.health-check.result == 'success' }}
        run: |
          echo "üöÄ Deployment successful!"
          echo "üì± Site URL: https://samuelrdc69.github.io/flyrancher-pro-frontend/"
          echo "‚úÖ Health check passed"
      
      - name: Deployment Failure Notification  
        if: ${{ needs.deploy.result == 'failure' || needs.health-check.result == 'failure' }}
        run: |
          echo "‚ùå Deployment or health check failed"
          echo "üîç Check the logs for details"
          exit 1
