name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the main branch
  push:
    branches: [ main, master ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build and Deploy job
  build-and-deploy:
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      
      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile --prefer-offline --network-timeout 100000
          echo "‚úÖ Dependencies installed successfully"
      
      - name: Run linting (optional)
        run: |
          yarn lint || echo "‚ö†Ô∏è Linting issues found or not configured"
        continue-on-error: true
      
      - name: Build application
        run: |
          yarn build
        env:
          NODE_ENV: production
          CI: true
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Basic health check
  health-check:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: success()
    
    steps:
      - name: Wait for deployment
        run: sleep 30
      
      - name: Health check
        run: |
          echo "üîç Checking site health..."
          
          # Check if the site is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code};%{time_total}" https://samuelrdc69.github.io/flyrancher-pro-frontend/ || echo "000;0")
          STATUS_CODE=$(echo $HTTP_STATUS | cut -d';' -f1)
          RESPONSE_TIME=$(echo $HTTP_STATUS | cut -d';' -f2)
          
          echo "üìä Response time: ${RESPONSE_TIME}s"
          echo "üìà HTTP Status: $STATUS_CODE"
          
          if [ "$STATUS_CODE" = "200" ]; then
            echo "‚úÖ Site is accessible and healthy!"
            echo "üöÄ Deployment successful!"
            echo "üì± Site URL: https://samuelrdc69.github.io/flyrancher-pro-frontend/"
          else
            echo "‚ö†Ô∏è Site returned status code: $STATUS_CODE"
            echo "üîç This might be expected if the site is still propagating"
            exit 0  # Don't fail deployment for this
          fi
